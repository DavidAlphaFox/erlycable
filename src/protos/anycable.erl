%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.24.4
-module(anycable).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_Status/1, enum_value_by_symbol_Status/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("anycable.hrl").
-include("gpb.hrl").


-record('map<string,string>',{key, value}).

-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'DisconnectResponse'{} ->
	  e_msg_DisconnectResponse(Msg, TrUserData);
      #'CommandResponse'{} ->
	  e_msg_CommandResponse(Msg, TrUserData);
      #'CommandMessage'{} ->
	  e_msg_CommandMessage(Msg, TrUserData);
      #'ConnectionResponse'{} ->
	  e_msg_ConnectionResponse(Msg, TrUserData);
      #'ConnectionRequest'{} ->
	  e_msg_ConnectionRequest(Msg, TrUserData);
      #'DisconnectRequest'{} ->
	  e_msg_DisconnectRequest(Msg, TrUserData)
    end.



e_msg_DisconnectResponse(Msg, TrUserData) ->
    e_msg_DisconnectResponse(Msg, <<>>, TrUserData).


e_msg_DisconnectResponse(#'DisconnectResponse'{status =
						   F1},
			 Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   TrF1 = id(F1, TrUserData),
	   e_enum_Status(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_CommandResponse(Msg, TrUserData) ->
    e_msg_CommandResponse(Msg, <<>>, TrUserData).


e_msg_CommandResponse(#'CommandResponse'{status = F1,
					 disconnect = F2, stop_streams = F3,
					 streams = F4, transmissions = F5},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		TrF1 = id(F1, TrUserData),
		e_enum_Status(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		TrF2 = id(F2, TrUserData),
		e_type_bool(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		TrF3 = id(F3, TrUserData),
		e_type_bool(TrF3, <<B2/binary, 24>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true ->
		  e_field_CommandResponse_streams(TrF4, B3, TrUserData)
	   end
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      if TrF5 == [] -> B4;
	 true ->
	     e_field_CommandResponse_transmissions(TrF5, B4,
						   TrUserData)
      end
    end.

e_msg_CommandMessage(Msg, TrUserData) ->
    e_msg_CommandMessage(Msg, <<>>, TrUserData).


e_msg_CommandMessage(#'CommandMessage'{command = F1,
				       identifier = F2,
				       connection_identifiers = F3, data = F4},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		TrF1 = id(F1, TrUserData),
		e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		TrF2 = id(F2, TrUserData),
		e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		TrF3 = id(F3, TrUserData),
		e_type_string(TrF3, <<B2/binary, 26>>)
	 end,
    if F4 == undefined -> B3;
       true ->
	   TrF4 = id(F4, TrUserData),
	   e_type_string(TrF4, <<B3/binary, 34>>)
    end.

e_msg_ConnectionResponse(Msg, TrUserData) ->
    e_msg_ConnectionResponse(Msg, <<>>, TrUserData).


e_msg_ConnectionResponse(#'ConnectionResponse'{status =
						   F1,
					       identifiers = F2,
					       transmissions = F3},
			 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		TrF1 = id(F1, TrUserData),
		e_enum_Status(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		TrF2 = id(F2, TrUserData),
		e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true ->
	     e_field_ConnectionResponse_transmissions(TrF3, B2,
						      TrUserData)
      end
    end.

e_msg_ConnectionRequest(Msg, TrUserData) ->
    e_msg_ConnectionRequest(Msg, <<>>, TrUserData).


e_msg_ConnectionRequest(#'ConnectionRequest'{path = F1,
					     headers = F2},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		TrF1 = id(F1, TrUserData),
		e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_ConnectionRequest_headers(TrF2, B1, TrUserData)
      end
    end.

e_msg_DisconnectRequest(Msg, TrUserData) ->
    e_msg_DisconnectRequest(Msg, <<>>, TrUserData).


e_msg_DisconnectRequest(#'DisconnectRequest'{identifiers
						 = F1,
					     subscriptions = F2, path = F3,
					     headers = F4},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		TrF1 = id(F1, TrUserData),
		e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  e_field_DisconnectRequest_subscriptions(TrF2, B1,
							  TrUserData)
	   end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		TrF3 = id(F3, TrUserData),
		e_type_string(TrF3, <<B2/binary, 26>>)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true ->
	     e_field_DisconnectRequest_headers(TrF4, B3, TrUserData)
      end
    end.

e_field_CommandResponse_streams([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_CommandResponse_streams(Rest, Bin3, TrUserData);
e_field_CommandResponse_streams([], Bin, _TrUserData) ->
    Bin.

e_field_CommandResponse_transmissions([Elem | Rest],
				      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_CommandResponse_transmissions(Rest, Bin3,
					  TrUserData);
e_field_CommandResponse_transmissions([], Bin,
				      _TrUserData) ->
    Bin.

e_field_ConnectionResponse_transmissions([Elem | Rest],
					 Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_ConnectionResponse_transmissions(Rest, Bin3,
					     TrUserData);
e_field_ConnectionResponse_transmissions([], Bin,
					 _TrUserData) ->
    Bin.

e_mfield_ConnectionRequest_headers(Msg, Bin,
				   TrUserData) ->
    SubBin = 'e_msg_map<string,string>'(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ConnectionRequest_headers([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_ConnectionRequest_headers('tr_encode_ConnectionRequest.headers[x]'(Elem,
										    TrUserData),
					   Bin2, TrUserData),
    e_field_ConnectionRequest_headers(Rest, Bin3,
				      TrUserData);
e_field_ConnectionRequest_headers([], Bin,
				  _TrUserData) ->
    Bin.

e_field_DisconnectRequest_subscriptions([Elem | Rest],
					Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_DisconnectRequest_subscriptions(Rest, Bin3,
					    TrUserData);
e_field_DisconnectRequest_subscriptions([], Bin,
					_TrUserData) ->
    Bin.

e_mfield_DisconnectRequest_headers(Msg, Bin,
				   TrUserData) ->
    SubBin = 'e_msg_map<string,string>'(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DisconnectRequest_headers([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
	e_mfield_DisconnectRequest_headers('tr_encode_DisconnectRequest.headers[x]'(Elem,
										    TrUserData),
					   Bin2, TrUserData),
    e_field_DisconnectRequest_headers(Rest, Bin3,
				      TrUserData);
e_field_DisconnectRequest_headers([], Bin,
				  _TrUserData) ->
    Bin.


'e_msg_map<string,string>'(#'map<string,string>'{key =
						     F1,
						 value = F2},
			   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>)
    end.


e_enum_Status('ERROR', Bin) -> <<Bin/binary, 0>>;
e_enum_Status('SUCCESS', Bin) -> <<Bin/binary, 1>>;
e_enum_Status(V, Bin) -> e_varint(V, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'DisconnectResponse' ->
	  d_msg_DisconnectResponse(Bin, TrUserData);
      'CommandResponse' ->
	  d_msg_CommandResponse(Bin, TrUserData);
      'CommandMessage' ->
	  d_msg_CommandMessage(Bin, TrUserData);
      'ConnectionResponse' ->
	  d_msg_ConnectionResponse(Bin, TrUserData);
      'ConnectionRequest' ->
	  d_msg_ConnectionRequest(Bin, TrUserData);
      'DisconnectRequest' ->
	  d_msg_DisconnectRequest(Bin, TrUserData)
    end.



d_msg_DisconnectResponse(Bin, TrUserData) ->
    dfp_read_field_def_DisconnectResponse(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_DisconnectResponse(<<8,
					Rest/binary>>,
				      Z1, Z2, F1, TrUserData) ->
    d_field_DisconnectResponse_status(Rest, Z1, Z2, F1,
				      TrUserData);
dfp_read_field_def_DisconnectResponse(<<>>, 0, 0, F1,
				      _) ->
    #'DisconnectResponse'{status = F1};
dfp_read_field_def_DisconnectResponse(Other, Z1, Z2, F1,
				      TrUserData) ->
    dg_read_field_def_DisconnectResponse(Other, Z1, Z2, F1,
					 TrUserData).

dg_read_field_def_DisconnectResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DisconnectResponse(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
dg_read_field_def_DisconnectResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_DisconnectResponse_status(Rest, 0, 0, F1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DisconnectResponse(Rest, 0, 0, F1,
					       TrUserData);
	    1 ->
		skip_64_DisconnectResponse(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_DisconnectResponse(Rest, 0, 0, F1,
							 TrUserData);
	    5 ->
		skip_32_DisconnectResponse(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_DisconnectResponse(<<>>, 0, 0, F1,
				     _) ->
    #'DisconnectResponse'{status = F1}.

d_field_DisconnectResponse_status(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_DisconnectResponse_status(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
d_field_DisconnectResponse_status(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_Status(Tmp),
    dfp_read_field_def_DisconnectResponse(Rest, 0, 0,
					  NewFValue, TrUserData).


skip_varint_DisconnectResponse(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    skip_varint_DisconnectResponse(Rest, Z1, Z2, F1,
				   TrUserData);
skip_varint_DisconnectResponse(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_DisconnectResponse(Rest, Z1, Z2, F1,
					  TrUserData).


skip_length_delimited_DisconnectResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_DisconnectResponse(Rest, N + 7,
					     X bsl N + Acc, F1, TrUserData);
skip_length_delimited_DisconnectResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DisconnectResponse(Rest2, 0, 0, F1,
					  TrUserData).


skip_32_DisconnectResponse(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_DisconnectResponse(Rest, Z1, Z2, F1,
					  TrUserData).


skip_64_DisconnectResponse(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_DisconnectResponse(Rest, Z1, Z2, F1,
					  TrUserData).


d_msg_CommandResponse(Bin, TrUserData) ->
    dfp_read_field_def_CommandResponse(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id([], TrUserData), id([], TrUserData),
				       TrUserData).

dfp_read_field_def_CommandResponse(<<8, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_CommandResponse_status(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, TrUserData);
dfp_read_field_def_CommandResponse(<<16, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_CommandResponse_disconnect(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, TrUserData);
dfp_read_field_def_CommandResponse(<<24, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_CommandResponse_stop_streams(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, TrUserData);
dfp_read_field_def_CommandResponse(<<34, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_CommandResponse_streams(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, TrUserData);
dfp_read_field_def_CommandResponse(<<42, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_CommandResponse_transmissions(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, TrUserData);
dfp_read_field_def_CommandResponse(<<>>, 0, 0, F1, F2,
				   F3, F4, F5, TrUserData) ->
    #'CommandResponse'{status = F1, disconnect = F2,
		       stop_streams = F3,
		       streams = lists_reverse(F4, TrUserData),
		       transmissions = lists_reverse(F5, TrUserData)};
dfp_read_field_def_CommandResponse(Other, Z1, Z2, F1,
				   F2, F3, F4, F5, TrUserData) ->
    dg_read_field_def_CommandResponse(Other, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData).

dg_read_field_def_CommandResponse(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CommandResponse(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5,
				      TrUserData);
dg_read_field_def_CommandResponse(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CommandResponse_status(Rest, 0, 0, F1, F2, F3,
					 F4, F5, TrUserData);
      16 ->
	  d_field_CommandResponse_disconnect(Rest, 0, 0, F1, F2,
					     F3, F4, F5, TrUserData);
      24 ->
	  d_field_CommandResponse_stop_streams(Rest, 0, 0, F1, F2,
					       F3, F4, F5, TrUserData);
      34 ->
	  d_field_CommandResponse_streams(Rest, 0, 0, F1, F2, F3,
					  F4, F5, TrUserData);
      42 ->
	  d_field_CommandResponse_transmissions(Rest, 0, 0, F1,
						F2, F3, F4, F5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CommandResponse(Rest, 0, 0, F1, F2, F3, F4,
					    F5, TrUserData);
	    1 ->
		skip_64_CommandResponse(Rest, 0, 0, F1, F2, F3, F4, F5,
					TrUserData);
	    2 ->
		skip_length_delimited_CommandResponse(Rest, 0, 0, F1,
						      F2, F3, F4, F5,
						      TrUserData);
	    5 ->
		skip_32_CommandResponse(Rest, 0, 0, F1, F2, F3, F4, F5,
					TrUserData)
	  end
    end;
dg_read_field_def_CommandResponse(<<>>, 0, 0, F1, F2,
				  F3, F4, F5, TrUserData) ->
    #'CommandResponse'{status = F1, disconnect = F2,
		       stop_streams = F3,
		       streams = lists_reverse(F4, TrUserData),
		       transmissions = lists_reverse(F5, TrUserData)}.

d_field_CommandResponse_status(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_CommandResponse_status(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5,
				   TrUserData);
d_field_CommandResponse_status(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, F3, F4, F5, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_Status(Tmp),
    dfp_read_field_def_CommandResponse(Rest, 0, 0,
				       NewFValue, F2, F3, F4, F5, TrUserData).


d_field_CommandResponse_disconnect(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_CommandResponse_disconnect(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5,
				       TrUserData);
d_field_CommandResponse_disconnect(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, _, F3, F4, F5, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CommandResponse(Rest, 0, 0, F1,
				       NewFValue, F3, F4, F5, TrUserData).


d_field_CommandResponse_stop_streams(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_CommandResponse_stop_streams(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5,
					 TrUserData);
d_field_CommandResponse_stop_streams(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, _, F4, F5, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CommandResponse(Rest, 0, 0, F1, F2,
				       NewFValue, F4, F5, TrUserData).


d_field_CommandResponse_streams(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_CommandResponse_streams(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5,
				    TrUserData);
d_field_CommandResponse_streams(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_CommandResponse(Rest2, 0, 0, F1, F2,
				       F3, cons(NewFValue, F4, TrUserData), F5,
				       TrUserData).


d_field_CommandResponse_transmissions(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_CommandResponse_transmissions(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5,
					  TrUserData);
d_field_CommandResponse_transmissions(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_CommandResponse(Rest2, 0, 0, F1, F2,
				       F3, F4, cons(NewFValue, F5, TrUserData),
				       TrUserData).


skip_varint_CommandResponse(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_CommandResponse(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, TrUserData);
skip_varint_CommandResponse(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_CommandResponse(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, TrUserData).


skip_length_delimited_CommandResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    skip_length_delimited_CommandResponse(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5,
					  TrUserData);
skip_length_delimited_CommandResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CommandResponse(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, TrUserData).


skip_32_CommandResponse(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_CommandResponse(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, TrUserData).


skip_64_CommandResponse(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_CommandResponse(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, TrUserData).


d_msg_CommandMessage(Bin, TrUserData) ->
    dfp_read_field_def_CommandMessage(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_CommandMessage(<<10, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_CommandMessage_command(Rest, Z1, Z2, F1, F2, F3,
				   F4, TrUserData);
dfp_read_field_def_CommandMessage(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_CommandMessage_identifier(Rest, Z1, Z2, F1, F2,
				      F3, F4, TrUserData);
dfp_read_field_def_CommandMessage(<<26, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_CommandMessage_connection_identifiers(Rest, Z1,
						  Z2, F1, F2, F3, F4,
						  TrUserData);
dfp_read_field_def_CommandMessage(<<34, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_CommandMessage_data(Rest, Z1, Z2, F1, F2, F3,
				F4, TrUserData);
dfp_read_field_def_CommandMessage(<<>>, 0, 0, F1, F2,
				  F3, F4, _) ->
    #'CommandMessage'{command = F1, identifier = F2,
		      connection_identifiers = F3, data = F4};
dfp_read_field_def_CommandMessage(Other, Z1, Z2, F1, F2,
				  F3, F4, TrUserData) ->
    dg_read_field_def_CommandMessage(Other, Z1, Z2, F1, F2,
				     F3, F4, TrUserData).

dg_read_field_def_CommandMessage(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CommandMessage(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, TrUserData);
dg_read_field_def_CommandMessage(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CommandMessage_command(Rest, 0, 0, F1, F2, F3,
					 F4, TrUserData);
      18 ->
	  d_field_CommandMessage_identifier(Rest, 0, 0, F1, F2,
					    F3, F4, TrUserData);
      26 ->
	  d_field_CommandMessage_connection_identifiers(Rest, 0,
							0, F1, F2, F3, F4,
							TrUserData);
      34 ->
	  d_field_CommandMessage_data(Rest, 0, 0, F1, F2, F3, F4,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CommandMessage(Rest, 0, 0, F1, F2, F3, F4,
					   TrUserData);
	    1 ->
		skip_64_CommandMessage(Rest, 0, 0, F1, F2, F3, F4,
				       TrUserData);
	    2 ->
		skip_length_delimited_CommandMessage(Rest, 0, 0, F1, F2,
						     F3, F4, TrUserData);
	    5 ->
		skip_32_CommandMessage(Rest, 0, 0, F1, F2, F3, F4,
				       TrUserData)
	  end
    end;
dg_read_field_def_CommandMessage(<<>>, 0, 0, F1, F2, F3,
				 F4, _) ->
    #'CommandMessage'{command = F1, identifier = F2,
		      connection_identifiers = F3, data = F4}.

d_field_CommandMessage_command(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_CommandMessage_command(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, TrUserData);
d_field_CommandMessage_command(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_CommandMessage(Rest2, 0, 0,
				      NewFValue, F2, F3, F4, TrUserData).


d_field_CommandMessage_identifier(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_CommandMessage_identifier(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4,
				      TrUserData);
d_field_CommandMessage_identifier(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_CommandMessage(Rest2, 0, 0, F1,
				      NewFValue, F3, F4, TrUserData).


d_field_CommandMessage_connection_identifiers(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4,
					      TrUserData)
    when N < 57 ->
    d_field_CommandMessage_connection_identifiers(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, TrUserData);
d_field_CommandMessage_connection_identifiers(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, _, F4,
					      TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_CommandMessage(Rest2, 0, 0, F1, F2,
				      NewFValue, F4, TrUserData).


d_field_CommandMessage_data(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_CommandMessage_data(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, TrUserData);
d_field_CommandMessage_data(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_CommandMessage(Rest2, 0, 0, F1, F2,
				      F3, NewFValue, TrUserData).


skip_varint_CommandMessage(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_CommandMessage(Rest, Z1, Z2, F1, F2, F3, F4,
			       TrUserData);
skip_varint_CommandMessage(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_CommandMessage(Rest, Z1, Z2, F1, F2,
				      F3, F4, TrUserData).


skip_length_delimited_CommandMessage(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_CommandMessage(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4,
					 TrUserData);
skip_length_delimited_CommandMessage(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CommandMessage(Rest2, 0, 0, F1, F2,
				      F3, F4, TrUserData).


skip_32_CommandMessage(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_CommandMessage(Rest, Z1, Z2, F1, F2,
				      F3, F4, TrUserData).


skip_64_CommandMessage(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_CommandMessage(Rest, Z1, Z2, F1, F2,
				      F3, F4, TrUserData).


d_msg_ConnectionResponse(Bin, TrUserData) ->
    dfp_read_field_def_ConnectionResponse(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id([], TrUserData), TrUserData).

dfp_read_field_def_ConnectionResponse(<<8,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ConnectionResponse_status(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData);
dfp_read_field_def_ConnectionResponse(<<18,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ConnectionResponse_identifiers(Rest, Z1, Z2, F1,
					   F2, F3, TrUserData);
dfp_read_field_def_ConnectionResponse(<<26,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ConnectionResponse_transmissions(Rest, Z1, Z2,
					     F1, F2, F3, TrUserData);
dfp_read_field_def_ConnectionResponse(<<>>, 0, 0, F1,
				      F2, F3, TrUserData) ->
    #'ConnectionResponse'{status = F1, identifiers = F2,
			  transmissions = lists_reverse(F3, TrUserData)};
dfp_read_field_def_ConnectionResponse(Other, Z1, Z2, F1,
				      F2, F3, TrUserData) ->
    dg_read_field_def_ConnectionResponse(Other, Z1, Z2, F1,
					 F2, F3, TrUserData).

dg_read_field_def_ConnectionResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ConnectionResponse(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_ConnectionResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ConnectionResponse_status(Rest, 0, 0, F1, F2,
					    F3, TrUserData);
      18 ->
	  d_field_ConnectionResponse_identifiers(Rest, 0, 0, F1,
						 F2, F3, TrUserData);
      26 ->
	  d_field_ConnectionResponse_transmissions(Rest, 0, 0, F1,
						   F2, F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ConnectionResponse(Rest, 0, 0, F1, F2, F3,
					       TrUserData);
	    1 ->
		skip_64_ConnectionResponse(Rest, 0, 0, F1, F2, F3,
					   TrUserData);
	    2 ->
		skip_length_delimited_ConnectionResponse(Rest, 0, 0, F1,
							 F2, F3, TrUserData);
	    5 ->
		skip_32_ConnectionResponse(Rest, 0, 0, F1, F2, F3,
					   TrUserData)
	  end
    end;
dg_read_field_def_ConnectionResponse(<<>>, 0, 0, F1, F2,
				     F3, TrUserData) ->
    #'ConnectionResponse'{status = F1, identifiers = F2,
			  transmissions = lists_reverse(F3, TrUserData)}.

d_field_ConnectionResponse_status(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ConnectionResponse_status(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_ConnectionResponse_status(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, F3, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_Status(Tmp),
    dfp_read_field_def_ConnectionResponse(Rest, 0, 0,
					  NewFValue, F2, F3, TrUserData).


d_field_ConnectionResponse_identifiers(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ConnectionResponse_identifiers(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3,
					   TrUserData);
d_field_ConnectionResponse_identifiers(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ConnectionResponse(Rest2, 0, 0, F1,
					  NewFValue, F3, TrUserData).


d_field_ConnectionResponse_transmissions(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ConnectionResponse_transmissions(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3,
					     TrUserData);
d_field_ConnectionResponse_transmissions(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ConnectionResponse(Rest2, 0, 0, F1,
					  F2, cons(NewFValue, F3, TrUserData),
					  TrUserData).


skip_varint_ConnectionResponse(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_ConnectionResponse(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
skip_varint_ConnectionResponse(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ConnectionResponse(Rest, Z1, Z2, F1,
					  F2, F3, TrUserData).


skip_length_delimited_ConnectionResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_ConnectionResponse(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3,
					     TrUserData);
skip_length_delimited_ConnectionResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ConnectionResponse(Rest2, 0, 0, F1,
					  F2, F3, TrUserData).


skip_32_ConnectionResponse(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ConnectionResponse(Rest, Z1, Z2, F1,
					  F2, F3, TrUserData).


skip_64_ConnectionResponse(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ConnectionResponse(Rest, Z1, Z2, F1,
					  F2, F3, TrUserData).


d_msg_ConnectionRequest(Bin, TrUserData) ->
    dfp_read_field_def_ConnectionRequest(Bin, 0, 0,
					 id(undefined, TrUserData),
					 'tr_decode_init_default_ConnectionRequest.headers'([],
											    TrUserData),
					 TrUserData).

dfp_read_field_def_ConnectionRequest(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_ConnectionRequest_path(Rest, Z1, Z2, F1, F2,
				   TrUserData);
dfp_read_field_def_ConnectionRequest(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_ConnectionRequest_headers(Rest, Z1, Z2, F1, F2,
				      TrUserData);
dfp_read_field_def_ConnectionRequest(<<>>, 0, 0, F1, F2,
				     TrUserData) ->
    #'ConnectionRequest'{path = F1,
			 headers =
			     'tr_decode_repeated_finalize_ConnectionRequest.headers'(F2,
										     TrUserData)};
dfp_read_field_def_ConnectionRequest(Other, Z1, Z2, F1,
				     F2, TrUserData) ->
    dg_read_field_def_ConnectionRequest(Other, Z1, Z2, F1,
					F2, TrUserData).

dg_read_field_def_ConnectionRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ConnectionRequest(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_ConnectionRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ConnectionRequest_path(Rest, 0, 0, F1, F2,
					 TrUserData);
      18 ->
	  d_field_ConnectionRequest_headers(Rest, 0, 0, F1, F2,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ConnectionRequest(Rest, 0, 0, F1, F2,
					      TrUserData);
	    1 ->
		skip_64_ConnectionRequest(Rest, 0, 0, F1, F2,
					  TrUserData);
	    2 ->
		skip_length_delimited_ConnectionRequest(Rest, 0, 0, F1,
							F2, TrUserData);
	    5 ->
		skip_32_ConnectionRequest(Rest, 0, 0, F1, F2,
					  TrUserData)
	  end
    end;
dg_read_field_def_ConnectionRequest(<<>>, 0, 0, F1, F2,
				    TrUserData) ->
    #'ConnectionRequest'{path = F1,
			 headers =
			     'tr_decode_repeated_finalize_ConnectionRequest.headers'(F2,
										     TrUserData)}.

d_field_ConnectionRequest_path(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_ConnectionRequest_path(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
d_field_ConnectionRequest_path(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ConnectionRequest(Rest2, 0, 0,
					 NewFValue, F2, TrUserData).


d_field_ConnectionRequest_headers(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_ConnectionRequest_headers(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
d_field_ConnectionRequest_headers(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id('d_msg_map<string,string>'(Bs,
					      TrUserData),
		   TrUserData),
    dfp_read_field_def_ConnectionRequest(Rest2, 0, 0, F1,
					 'tr_decode_repeated_add_elem_ConnectionRequest.headers'(NewFValue,
												 F2,
												 TrUserData),
					 TrUserData).


skip_varint_ConnectionRequest(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_ConnectionRequest(Rest, Z1, Z2, F1, F2,
				  TrUserData);
skip_varint_ConnectionRequest(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_ConnectionRequest(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_length_delimited_ConnectionRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ConnectionRequest(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_ConnectionRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ConnectionRequest(Rest2, 0, 0, F1,
					 F2, TrUserData).


skip_32_ConnectionRequest(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_ConnectionRequest(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_64_ConnectionRequest(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_ConnectionRequest(Rest, Z1, Z2, F1,
					 F2, TrUserData).


d_msg_DisconnectRequest(Bin, TrUserData) ->
    dfp_read_field_def_DisconnectRequest(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id([], TrUserData),
					 id(undefined, TrUserData),
					 'tr_decode_init_default_DisconnectRequest.headers'([],
											    TrUserData),
					 TrUserData).

dfp_read_field_def_DisconnectRequest(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_DisconnectRequest_identifiers(Rest, Z1, Z2, F1,
					  F2, F3, F4, TrUserData);
dfp_read_field_def_DisconnectRequest(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_DisconnectRequest_subscriptions(Rest, Z1, Z2,
					    F1, F2, F3, F4, TrUserData);
dfp_read_field_def_DisconnectRequest(<<26,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_DisconnectRequest_path(Rest, Z1, Z2, F1, F2, F3,
				   F4, TrUserData);
dfp_read_field_def_DisconnectRequest(<<34,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_DisconnectRequest_headers(Rest, Z1, Z2, F1, F2,
				      F3, F4, TrUserData);
dfp_read_field_def_DisconnectRequest(<<>>, 0, 0, F1, F2,
				     F3, F4, TrUserData) ->
    #'DisconnectRequest'{identifiers = F1,
			 subscriptions = lists_reverse(F2, TrUserData),
			 path = F3,
			 headers =
			     'tr_decode_repeated_finalize_DisconnectRequest.headers'(F4,
										     TrUserData)};
dfp_read_field_def_DisconnectRequest(Other, Z1, Z2, F1,
				     F2, F3, F4, TrUserData) ->
    dg_read_field_def_DisconnectRequest(Other, Z1, Z2, F1,
					F2, F3, F4, TrUserData).

dg_read_field_def_DisconnectRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DisconnectRequest(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4,
					TrUserData);
dg_read_field_def_DisconnectRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DisconnectRequest_identifiers(Rest, 0, 0, F1,
						F2, F3, F4, TrUserData);
      18 ->
	  d_field_DisconnectRequest_subscriptions(Rest, 0, 0, F1,
						  F2, F3, F4, TrUserData);
      26 ->
	  d_field_DisconnectRequest_path(Rest, 0, 0, F1, F2, F3,
					 F4, TrUserData);
      34 ->
	  d_field_DisconnectRequest_headers(Rest, 0, 0, F1, F2,
					    F3, F4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DisconnectRequest(Rest, 0, 0, F1, F2, F3,
					      F4, TrUserData);
	    1 ->
		skip_64_DisconnectRequest(Rest, 0, 0, F1, F2, F3, F4,
					  TrUserData);
	    2 ->
		skip_length_delimited_DisconnectRequest(Rest, 0, 0, F1,
							F2, F3, F4, TrUserData);
	    5 ->
		skip_32_DisconnectRequest(Rest, 0, 0, F1, F2, F3, F4,
					  TrUserData)
	  end
    end;
dg_read_field_def_DisconnectRequest(<<>>, 0, 0, F1, F2,
				    F3, F4, TrUserData) ->
    #'DisconnectRequest'{identifiers = F1,
			 subscriptions = lists_reverse(F2, TrUserData),
			 path = F3,
			 headers =
			     'tr_decode_repeated_finalize_DisconnectRequest.headers'(F4,
										     TrUserData)}.

d_field_DisconnectRequest_identifiers(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_DisconnectRequest_identifiers(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4,
					  TrUserData);
d_field_DisconnectRequest_identifiers(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DisconnectRequest(Rest2, 0, 0,
					 NewFValue, F2, F3, F4, TrUserData).


d_field_DisconnectRequest_subscriptions(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_DisconnectRequest_subscriptions(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4,
					    TrUserData);
d_field_DisconnectRequest_subscriptions(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DisconnectRequest(Rest2, 0, 0, F1,
					 cons(NewFValue, F2, TrUserData), F3,
					 F4, TrUserData).


d_field_DisconnectRequest_path(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_DisconnectRequest_path(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, TrUserData);
d_field_DisconnectRequest_path(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, _, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DisconnectRequest(Rest2, 0, 0, F1,
					 F2, NewFValue, F4, TrUserData).


d_field_DisconnectRequest_headers(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_DisconnectRequest_headers(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4,
				      TrUserData);
d_field_DisconnectRequest_headers(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id('d_msg_map<string,string>'(Bs,
					      TrUserData),
		   TrUserData),
    dfp_read_field_def_DisconnectRequest(Rest2, 0, 0, F1,
					 F2, F3,
					 'tr_decode_repeated_add_elem_DisconnectRequest.headers'(NewFValue,
												 F4,
												 TrUserData),
					 TrUserData).


skip_varint_DisconnectRequest(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_DisconnectRequest(Rest, Z1, Z2, F1, F2, F3,
				  F4, TrUserData);
skip_varint_DisconnectRequest(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_DisconnectRequest(Rest, Z1, Z2, F1,
					 F2, F3, F4, TrUserData).


skip_length_delimited_DisconnectRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_DisconnectRequest(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4,
					    TrUserData);
skip_length_delimited_DisconnectRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DisconnectRequest(Rest2, 0, 0, F1,
					 F2, F3, F4, TrUserData).


skip_32_DisconnectRequest(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_DisconnectRequest(Rest, Z1, Z2, F1,
					 F2, F3, F4, TrUserData).


skip_64_DisconnectRequest(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_DisconnectRequest(Rest, Z1, Z2, F1,
					 F2, F3, F4, TrUserData).



'd_msg_map<string,string>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    TrUserData).

'dfp_read_field_def_map<string,string>'(<<10,
					  Rest/binary>>,
					Z1, Z2, F1, F2, TrUserData) ->
    'd_field_map<string,string>_key'(Rest, Z1, Z2, F1, F2,
				     TrUserData);
'dfp_read_field_def_map<string,string>'(<<18,
					  Rest/binary>>,
					Z1, Z2, F1, F2, TrUserData) ->
    'd_field_map<string,string>_value'(Rest, Z1, Z2, F1, F2,
				       TrUserData);
'dfp_read_field_def_map<string,string>'(<<>>, 0, 0, F1,
					F2, _) ->
    #'map<string,string>'{key = F1, value = F2};
'dfp_read_field_def_map<string,string>'(Other, Z1, Z2,
					F1, F2, TrUserData) ->
    'dg_read_field_def_map<string,string>'(Other, Z1, Z2,
					   F1, F2, TrUserData).

'dg_read_field_def_map<string,string>'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,string>'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, TrUserData);
'dg_read_field_def_map<string,string>'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_map<string,string>_key'(Rest, 0, 0, F1, F2,
					   TrUserData);
      18 ->
	  'd_field_map<string,string>_value'(Rest, 0, 0, F1, F2,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<string,string>'(Rest, 0, 0, F1, F2,
						 TrUserData);
	    1 ->
		'skip_64_map<string,string>'(Rest, 0, 0, F1, F2,
					     TrUserData);
	    2 ->
		'skip_length_delimited_map<string,string>'(Rest, 0, 0,
							   F1, F2, TrUserData);
	    5 ->
		'skip_32_map<string,string>'(Rest, 0, 0, F1, F2,
					     TrUserData)
	  end
    end;
'dg_read_field_def_map<string,string>'(<<>>, 0, 0, F1,
				       F2, _) ->
    #'map<string,string>'{key = F1, value = F2}.

'd_field_map<string,string>_key'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_map<string,string>_key'(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
'd_field_map<string,string>_key'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_map<string,string>'(Rest2, 0, 0,
					    NewFValue, F2, TrUserData).


'd_field_map<string,string>_value'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_map<string,string>_value'(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
'd_field_map<string,string>_value'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_map<string,string>'(Rest2, 0, 0, F1,
					    NewFValue, TrUserData).


'skip_varint_map<string,string>'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    'skip_varint_map<string,string>'(Rest, Z1, Z2, F1, F2,
				     TrUserData);
'skip_varint_map<string,string>'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F1, F2, TrUserData).


'skip_length_delimited_map<string,string>'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,string>'(Rest, N + 7,
					       X bsl N + Acc, F1, F2,
					       TrUserData);
'skip_length_delimited_map<string,string>'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,string>'(Rest2, 0, 0, F1,
					    F2, TrUserData).


'skip_32_map<string,string>'(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F1, F2, TrUserData).


'skip_64_map<string,string>'(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F1, F2, TrUserData).



d_enum_Status(0) -> 'ERROR';
d_enum_Status(1) -> 'SUCCESS';
d_enum_Status(V) -> V.



merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'DisconnectResponse'{} ->
	  merge_msg_DisconnectResponse(Prev, New, TrUserData);
      #'CommandResponse'{} ->
	  merge_msg_CommandResponse(Prev, New, TrUserData);
      #'CommandMessage'{} ->
	  merge_msg_CommandMessage(Prev, New, TrUserData);
      #'ConnectionResponse'{} ->
	  merge_msg_ConnectionResponse(Prev, New, TrUserData);
      #'ConnectionRequest'{} ->
	  merge_msg_ConnectionRequest(Prev, New, TrUserData);
      #'DisconnectRequest'{} ->
	  merge_msg_DisconnectRequest(Prev, New, TrUserData)
    end.

merge_msg_DisconnectResponse(#'DisconnectResponse'{status
						       = PFstatus},
			     #'DisconnectResponse'{status = NFstatus}, _) ->
    #'DisconnectResponse'{status =
			      if NFstatus =:= undefined -> PFstatus;
				 true -> NFstatus
			      end}.

merge_msg_CommandResponse(#'CommandResponse'{status =
						 PFstatus,
					     disconnect = PFdisconnect,
					     stop_streams = PFstop_streams,
					     streams = PFstreams,
					     transmissions = PFtransmissions},
			  #'CommandResponse'{status = NFstatus,
					     disconnect = NFdisconnect,
					     stop_streams = NFstop_streams,
					     streams = NFstreams,
					     transmissions = NFtransmissions},
			  TrUserData) ->
    #'CommandResponse'{status =
			   if NFstatus =:= undefined -> PFstatus;
			      true -> NFstatus
			   end,
		       disconnect =
			   if NFdisconnect =:= undefined -> PFdisconnect;
			      true -> NFdisconnect
			   end,
		       stop_streams =
			   if NFstop_streams =:= undefined -> PFstop_streams;
			      true -> NFstop_streams
			   end,
		       streams = 'erlang_++'(PFstreams, NFstreams, TrUserData),
		       transmissions =
			   'erlang_++'(PFtransmissions, NFtransmissions,
				       TrUserData)}.

merge_msg_CommandMessage(#'CommandMessage'{command =
					       PFcommand,
					   identifier = PFidentifier,
					   connection_identifiers =
					       PFconnection_identifiers,
					   data = PFdata},
			 #'CommandMessage'{command = NFcommand,
					   identifier = NFidentifier,
					   connection_identifiers =
					       NFconnection_identifiers,
					   data = NFdata},
			 _) ->
    #'CommandMessage'{command =
			  if NFcommand =:= undefined -> PFcommand;
			     true -> NFcommand
			  end,
		      identifier =
			  if NFidentifier =:= undefined -> PFidentifier;
			     true -> NFidentifier
			  end,
		      connection_identifiers =
			  if NFconnection_identifiers =:= undefined ->
				 PFconnection_identifiers;
			     true -> NFconnection_identifiers
			  end,
		      data =
			  if NFdata =:= undefined -> PFdata;
			     true -> NFdata
			  end}.

merge_msg_ConnectionResponse(#'ConnectionResponse'{status
						       = PFstatus,
						   identifiers = PFidentifiers,
						   transmissions =
						       PFtransmissions},
			     #'ConnectionResponse'{status = NFstatus,
						   identifiers = NFidentifiers,
						   transmissions =
						       NFtransmissions},
			     TrUserData) ->
    #'ConnectionResponse'{status =
			      if NFstatus =:= undefined -> PFstatus;
				 true -> NFstatus
			      end,
			  identifiers =
			      if NFidentifiers =:= undefined -> PFidentifiers;
				 true -> NFidentifiers
			      end,
			  transmissions =
			      'erlang_++'(PFtransmissions, NFtransmissions,
					  TrUserData)}.

merge_msg_ConnectionRequest(#'ConnectionRequest'{path =
						     PFpath,
						 headers = PFheaders},
			    #'ConnectionRequest'{path = NFpath,
						 headers = NFheaders},
			    TrUserData) ->
    #'ConnectionRequest'{path =
			     if NFpath =:= undefined -> PFpath;
				true -> NFpath
			     end,
			 headers =
			     'tr_merge_ConnectionRequest.headers'(PFheaders,
								  NFheaders,
								  TrUserData)}.

merge_msg_DisconnectRequest(#'DisconnectRequest'{identifiers
						     = PFidentifiers,
						 subscriptions =
						     PFsubscriptions,
						 path = PFpath,
						 headers = PFheaders},
			    #'DisconnectRequest'{identifiers = NFidentifiers,
						 subscriptions =
						     NFsubscriptions,
						 path = NFpath,
						 headers = NFheaders},
			    TrUserData) ->
    #'DisconnectRequest'{identifiers =
			     if NFidentifiers =:= undefined -> PFidentifiers;
				true -> NFidentifiers
			     end,
			 subscriptions =
			     'erlang_++'(PFsubscriptions, NFsubscriptions,
					 TrUserData),
			 path =
			     if NFpath =:= undefined -> PFpath;
				true -> NFpath
			     end,
			 headers =
			     'tr_merge_DisconnectRequest.headers'(PFheaders,
								  NFheaders,
								  TrUserData)}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'DisconnectResponse'{} ->
	  v_msg_DisconnectResponse(Msg, ['DisconnectResponse'],
				   TrUserData);
      #'CommandResponse'{} ->
	  v_msg_CommandResponse(Msg, ['CommandResponse'],
				TrUserData);
      #'CommandMessage'{} ->
	  v_msg_CommandMessage(Msg, ['CommandMessage'],
			       TrUserData);
      #'ConnectionResponse'{} ->
	  v_msg_ConnectionResponse(Msg, ['ConnectionResponse'],
				   TrUserData);
      #'ConnectionRequest'{} ->
	  v_msg_ConnectionRequest(Msg, ['ConnectionRequest'],
				  TrUserData);
      #'DisconnectRequest'{} ->
	  v_msg_DisconnectRequest(Msg, ['DisconnectRequest'],
				  TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_DisconnectResponse/3}).
v_msg_DisconnectResponse(#'DisconnectResponse'{status =
						   F1},
			 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_enum_Status(F1, [status | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_CommandResponse/3}).
v_msg_CommandResponse(#'CommandResponse'{status = F1,
					 disconnect = F2, stop_streams = F3,
					 streams = F4, transmissions = F5},
		      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_enum_Status(F1, [status | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [disconnect | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [stop_streams | Path])
    end,
    if is_list(F4) ->
	   _ = [v_type_string(Elem, [streams | Path])
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F4, Path)
    end,
    if is_list(F5) ->
	   _ = [v_type_string(Elem, [transmissions | Path])
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F5, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_CommandMessage/3}).
v_msg_CommandMessage(#'CommandMessage'{command = F1,
				       identifier = F2,
				       connection_identifiers = F3, data = F4},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [command | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [identifier | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_string(F3, [connection_identifiers | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [data | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ConnectionResponse/3}).
v_msg_ConnectionResponse(#'ConnectionResponse'{status =
						   F1,
					       identifiers = F2,
					       transmissions = F3},
			 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_enum_Status(F1, [status | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [identifiers | Path])
    end,
    if is_list(F3) ->
	   _ = [v_type_string(Elem, [transmissions | Path])
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F3, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ConnectionRequest/3}).
v_msg_ConnectionRequest(#'ConnectionRequest'{path = F1,
					     headers = F2},
			Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [path | Path])
    end,
    'v_map<string,string>'(F2, [headers | Path],
			   TrUserData),
    ok.

-dialyzer({nowarn_function,v_msg_DisconnectRequest/3}).
v_msg_DisconnectRequest(#'DisconnectRequest'{identifiers
						 = F1,
					     subscriptions = F2, path = F3,
					     headers = F4},
			Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [identifiers | Path])
    end,
    if is_list(F2) ->
	   _ = [v_type_string(Elem, [subscriptions | Path])
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F2, Path)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [path | Path])
    end,
    'v_map<string,string>'(F4, [headers | Path],
			   TrUserData),
    ok.

-dialyzer({nowarn_function,v_enum_Status/2}).
v_enum_Status('ERROR', _Path) -> ok;
v_enum_Status('SUCCESS', _Path) -> ok;
v_enum_Status(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_Status(X, Path) ->
    mk_type_error({invalid_enum, 'Status'}, X, Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,'v_map<string,string>'/3}).
'v_map<string,string>'(KVs, Path, _)
    when is_list(KVs) ->
    [case X of
       {Key, Value} ->
	   v_type_string(Key, [key | Path]),
	   v_type_string(Value, [value | Path]);
       _ -> mk_type_error(invalid_key_value_tuple, X, Path)
     end
     || X <- KVs],
    ok;
'v_map<string,string>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_list_of_key_value_tuples, X,
		  Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).

-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

-compile({inline,'tr_decode_init_default_ConnectionRequest.headers'/2}).
'tr_decode_init_default_ConnectionRequest.headers'(_,
						   _) ->
    mt_empty_map_r().

-compile({inline,'tr_decode_repeated_add_elem_ConnectionRequest.headers'/3}).
'tr_decode_repeated_add_elem_ConnectionRequest.headers'(Elem,
							L, _) ->
    mt_add_item_r(Elem, L).

-compile({inline,'tr_decode_repeated_finalize_ConnectionRequest.headers'/2}).
'tr_decode_repeated_finalize_ConnectionRequest.headers'(L,
							_) ->
    mt_finalize_items_r(L).

-compile({inline,'tr_merge_ConnectionRequest.headers'/3}).
'tr_merge_ConnectionRequest.headers'(X1, X2, _) ->
    mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_init_default_DisconnectRequest.headers'/2}).
'tr_decode_init_default_DisconnectRequest.headers'(_,
						   _) ->
    mt_empty_map_r().

-compile({inline,'tr_decode_repeated_add_elem_DisconnectRequest.headers'/3}).
'tr_decode_repeated_add_elem_DisconnectRequest.headers'(Elem,
							L, _) ->
    mt_add_item_r(Elem, L).

-compile({inline,'tr_decode_repeated_finalize_DisconnectRequest.headers'/2}).
'tr_decode_repeated_finalize_DisconnectRequest.headers'(L,
							_) ->
    mt_finalize_items_r(L).

-compile({inline,'tr_merge_DisconnectRequest.headers'/3}).
'tr_merge_DisconnectRequest.headers'(X1, X2, _) ->
    mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_encode_ConnectionRequest.headers[x]'/2}).
'tr_encode_ConnectionRequest.headers[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline,'tr_encode_DisconnectRequest.headers[x]'/2}).
'tr_encode_DisconnectRequest.headers[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline,mt_maptuple_to_pseudomsg_r/2}).
mt_maptuple_to_pseudomsg_r({K, V}, RName) ->
    {RName, K, V}.


-compile({inline,mt_empty_map_r/0}).
mt_empty_map_r() -> dict:new().

-compile({inline,mt_add_item_r/2}).
mt_add_item_r({_RName, K, V}, D) -> dict:store(K, V, D).


-compile({inline,mt_finalize_items_r/1}).
mt_finalize_items_r(D) -> dict:to_list(D).


-compile({inline,mt_merge_maptuples_r/2}).
mt_merge_maptuples_r(L1, L2) ->
    dict:to_list(dict:merge(fun (_Key, _V1, V2) -> V2 end,
			    dict:from_list(L1), dict:from_list(L2))).




get_msg_defs() ->
    [{{enum, 'Status'}, [{'ERROR', 0}, {'SUCCESS', 1}]},
     {{msg, 'DisconnectResponse'},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = {enum, 'Status'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'CommandResponse'},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = {enum, 'Status'}, occurrence = optional,
	      opts = []},
       #field{name = disconnect, fnum = 2, rnum = 3,
	      type = bool, occurrence = optional, opts = []},
       #field{name = stop_streams, fnum = 3, rnum = 4,
	      type = bool, occurrence = optional, opts = []},
       #field{name = streams, fnum = 4, rnum = 5,
	      type = string, occurrence = repeated, opts = []},
       #field{name = transmissions, fnum = 5, rnum = 6,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, 'CommandMessage'},
      [#field{name = command, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = identifier, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = connection_identifiers, fnum = 3,
	      rnum = 4, type = string, occurrence = optional,
	      opts = []},
       #field{name = data, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'ConnectionResponse'},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = {enum, 'Status'}, occurrence = optional,
	      opts = []},
       #field{name = identifiers, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = transmissions, fnum = 3, rnum = 4,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, 'ConnectionRequest'},
      [#field{name = path, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = headers, fnum = 2, rnum = 3,
	      type = {map, string, string}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'DisconnectRequest'},
      [#field{name = identifiers, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = subscriptions, fnum = 2, rnum = 3,
	      type = string, occurrence = repeated, opts = []},
       #field{name = path, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = headers, fnum = 4, rnum = 5,
	      type = {map, string, string}, occurrence = repeated,
	      opts = []}]}].


get_msg_names() ->
    ['DisconnectResponse', 'CommandResponse',
     'CommandMessage', 'ConnectionResponse',
     'ConnectionRequest', 'DisconnectRequest'].


get_enum_names() -> ['Status'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('DisconnectResponse') ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = {enum, 'Status'}, occurrence = optional,
	    opts = []}];
find_msg_def('CommandResponse') ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = {enum, 'Status'}, occurrence = optional,
	    opts = []},
     #field{name = disconnect, fnum = 2, rnum = 3,
	    type = bool, occurrence = optional, opts = []},
     #field{name = stop_streams, fnum = 3, rnum = 4,
	    type = bool, occurrence = optional, opts = []},
     #field{name = streams, fnum = 4, rnum = 5,
	    type = string, occurrence = repeated, opts = []},
     #field{name = transmissions, fnum = 5, rnum = 6,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def('CommandMessage') ->
    [#field{name = command, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = identifier, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = connection_identifiers, fnum = 3,
	    rnum = 4, type = string, occurrence = optional,
	    opts = []},
     #field{name = data, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('ConnectionResponse') ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = {enum, 'Status'}, occurrence = optional,
	    opts = []},
     #field{name = identifiers, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = transmissions, fnum = 3, rnum = 4,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def('ConnectionRequest') ->
    [#field{name = path, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = headers, fnum = 2, rnum = 3,
	    type = {map, string, string}, occurrence = repeated,
	    opts = []}];
find_msg_def('DisconnectRequest') ->
    [#field{name = identifiers, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = subscriptions, fnum = 2, rnum = 3,
	    type = string, occurrence = repeated, opts = []},
     #field{name = path, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = headers, fnum = 4, rnum = 5,
	    type = {map, string, string}, occurrence = repeated,
	    opts = []}];
find_msg_def(_) -> error.


find_enum_def('Status') ->
    [{'ERROR', 0}, {'SUCCESS', 1}];
find_enum_def(_) -> error.


enum_symbol_by_value('Status', Value) ->
    enum_symbol_by_value_Status(Value).


enum_value_by_symbol('Status', Sym) ->
    enum_value_by_symbol_Status(Sym).


enum_symbol_by_value_Status(0) -> 'ERROR';
enum_symbol_by_value_Status(1) -> 'SUCCESS'.


enum_value_by_symbol_Status('ERROR') -> 0;
enum_value_by_symbol_Status('SUCCESS') -> 1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> anycable.



gpb_version_as_string() ->
    "3.24.4".

gpb_version_as_list() ->
    [3,24,4].
